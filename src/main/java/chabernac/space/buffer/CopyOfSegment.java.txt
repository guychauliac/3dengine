package chabernac.space.buffer;

import java.awt.Color;

import chabernac.space.Vertex2D;
import chabernac.space.geom.Point2D;
import chabernac.space.texture.Texture;

public class CopyOfSegment{
  private Texture texture = null;
  private double xStart, xEnd, invzStart, invzEnd, lStart, lEnd = 0, x, invz, z, u, v;
  private double xDiff, invzRico, lRico = 0;
  public int color = 0;
  private Vertex2D start = null;
  private Vertex2D end = null;
  
  public CopyOfSegment(){
	  
  }
  
  public CopyOfSegment(Vertex2D aStartVertex, Vertex2D anEndVertex, Texture aTexture){
	  //this(aStartVertex, anEndVertex, Color.black.getRGB(), aTexture);
	  start = aStartVertex;
	  end = anEndVertex;
	  texture = aTexture;
	  calculateRicos();
  }
  
  public CopyOfSegment(Vertex2D aStartVertex, Vertex2D anEndVertex, int aColor){
	  //this(aStartVertex, anEndVertex, aColor, null);
	  start = aStartVertex;
	  end = anEndVertex;
	  color = aColor;
	  calculateRicos();
	  repositionStartEnd();
  }
  
  /*
  public Segment(double xStart, double xEnd, double zStart, double zEnd, double lStart, double lEnd, int aColor, Texture aTexture){
	  this.xStart = xStart;
	  this.xEnd = xEnd;
      this.zStart = zStart;
      this.zEnd = zEnd;
      this.lStart = lStart;
      this.lEnd = lEnd;
      this.color = aColor;
      this.texture = aTexture;
      calculateRicos();
  }
  */
  
  /*
  public Segment(Vertex2D aStartVertex, Vertex2D anEndVertex, int aColor, Texture aTexture){
	this(aStartVertex.getPoint().x, anEndVertex.getPoint().x, aStartVertex.getInverseDepth(), anEndVertex.getInverseDepth(), aStartVertex.getLightning(), anEndVertex.getLightning(), aColor, aTexture);
  }
  */
  
  private void calculateRicos() {
	  Point2D theStartPoint = start.getPoint();
	  Point2D theTextureStartPoint = start.getTexturePoint();
	  Point2D theEndPoint = start.getPoint();
	  Point2D theTextureEndPoint = start.getTexturePoint();
	  
	  xDiff = theEndPoint.x - theStartPoint.x;
	  
	  invzRico = (end.getInverseDepth() - start.getInverseDepth()) / xDiff;
	  lRico = (end.getLightning() - start.getLightning()) / xDiff;
	  
	  /*
    xDiff = xEnd - xStart;
    zRico = (zEnd - zStart) / xDiff;
    lRico = (lEnd - lStart) / xDiff;
    */
  }
  
  private void repositionStartEnd(){
	  xStart = Math.floor(start.getPoint().x);
	  xEnd = Math.ceil(end.getPoint().x);
	  invzStart = getZ(xStart);
	  invzEnd = getZ(xEnd);
	  lStart = getL(xStart);
  }

  private double getZ(double x){
    return start.getInverseDepth() + (x - start.getPoint().x) * invzRico;
  }
  
  private double getL(double x){
    return start.getLightning() + (x - start.getPoint().x) * lRico;
  }
  
  
  /*
  public void setXStart(double x){
    zStart = getZ(x);
    lStart = getL(x);
    xStart = x;
    calculateRicos();
  }
  
  public void setXEnd(double x){
    zEnd = getZ(x);
    lEnd = getL(x);
    xEnd = x;
    calculateRicos();
  }
  */
    
  public int getColor() {
    return color;
  }
  public void setColor(int color) {
    this.color = color;
  }
  public double getLEnd() {
    return lEnd;
  }
  public void setLEnd(double end) {
    lEnd = end;
  }
  public double getLStart() {
    return lStart;
  }
  public void setLStart(double start) {
    lStart = start;
  }
  public double getZEnd() {
    return zEnd;
  }
  public void setZEnd(double end) {
    zEnd = end;
  }
  public double getZStart() {
    return zStart;
  }
  public void setZStart(double start) {
    zStart = start;
  }
  public double getXEnd() {
    return xEnd;
  }
  public double getXStart() {
    return xStart;
  }
  
  public double getZRico() {
    return zRico;
  }
  public void setZRico(double rico) {
    zRico = rico;
  }
  public double getLRico() {
	return lRico;
  }
  public void setLRico(double rico) {
	lRico = rico;
  }
  public double getXDiff() {
	return xDiff;
  }
  public Texture getTexture() {
	return texture;
  }
  public void setTexture(Texture texture) {
	this.texture = texture;
  }

public CopyOfSegment[] intersect(CopyOfSegment aSegment){
    if(aSegment.getXStart() > getXEnd()){
      return new CopyOfSegment[]{this, aSegment};
    }
    if(aSegment.getXEnd() < getXStart()){
      return new CopyOfSegment[]{aSegment, this};
    }
    //From no one we have an overlap
    CopyOfSegment theLeftSegment = this;
    CopyOfSegment theRightSegment = aSegment;
    if(aSegment.getXStart() < getXStart()){
      CopyOfSegment theSegment = theLeftSegment;
      theLeftSegment = theRightSegment;
      theRightSegment = theSegment;
    }
    
      double theZ = theLeftSegment.getZ(theRightSegment.getXStart());
      double theIntersectX = theLeftSegment.intersectX(theRightSegment);
      if(theIntersectX != -1){
    	  if(theIntersectX == theLeftSegment.getXStart() || theIntersectX == theLeftSegment.getXEnd() || theIntersectX == theRightSegment.getXStart() || theIntersectX == theRightSegment.getXEnd()){
        	  theIntersectX = -1;
          }
      }
      
      
      if(theIntersectX == -1){
        //The segments have no intersection
        if(theZ < theRightSegment.getZStart() || (theZ == theRightSegment.getZStart() && theRightSegment.getZEnd() > theLeftSegment.getZEnd())){
          //theRightSegment lies behind this segment
          if(theRightSegment.getXEnd() <= theLeftSegment.getXEnd()){
        	//  --   (left)
        	//------ (right)
            //theRightSegment is completely hidden by this segment
            return new CopyOfSegment[]{theLeftSegment};
          } else {
        	//  -----
        	//----
            //theRightSegment is cut of by this segment
            theRightSegment.setXStart(theLeftSegment.getXEnd());
            return new CopyOfSegment[]{theLeftSegment, theRightSegment};
          }
        } else {
          //theRightSegment lies in front of this segment
          if(theRightSegment.getXEnd() >= theLeftSegment.getXEnd()){
        	if(theRightSegment.getXStart() == theLeftSegment.getXStart()){
        		//--    (left)
        		//----  (right)
        		//the left segment is completely hidden by the right segment
        		return new CopyOfSegment[]{theRightSegment};
        	} else {
	        	//-----   (left)
	        	//   ---- (right)
	            //the left segment is cut off by theRightSegment
	            theLeftSegment.setXEnd(theRightSegment.getXStart());
	            return new CopyOfSegment[]{theLeftSegment, theRightSegment};
        	}
          } else {
        	if(theRightSegment.getXStart() == theLeftSegment.getXStart()){
        		//--------- (left)
        		//---       (right)
        		//theRightSegment cuts off the left part of the left segment (sounds onlogic euh?)
        		theLeftSegment.setXStart(theRightSegment.getXEnd());
        		return new CopyOfSegment[]{theRightSegment, theLeftSegment};
        	} else {
        		//---------- (left)
        		//   --      (right)
	            //theRightSegment divides this segment in two seperate segments with theRightSegment inbetween.
	            CopyOfSegment theSegment = theLeftSegment.cloneSegment();
	            theLeftSegment.setXEnd(theRightSegment.getXStart());
	            theSegment.setXStart(theRightSegment.getXEnd());
	            return new CopyOfSegment[]{theLeftSegment, theRightSegment, theSegment};
        	}
          }
        }
      } else {
        //The two segments intersect
         if(theRightSegment.getZStart() < theZ){
          if(theRightSegment.getXEnd() > theLeftSegment.getXEnd()){
            //4 seperate segments
            CopyOfSegment theSegment2 = theRightSegment.cloneSegment();
            CopyOfSegment theSegment3 = theLeftSegment.cloneSegment();
            theLeftSegment.setXEnd(theRightSegment.getXStart());
            theSegment2.setXEnd(theIntersectX);
            theSegment3.setXStart(theIntersectX);
            theRightSegment.setXStart(theSegment3.getXEnd());
            return new CopyOfSegment[]{theLeftSegment, theSegment2, theSegment3, theRightSegment};
          } else {
        	if(theRightSegment.getXStart() == theLeftSegment.getXStart()){
            	//----**		-- = left
            	//****-------   ** = right
        		//2 segments
        		theRightSegment.setXEnd(theIntersectX);
        		theLeftSegment.setXStart(theIntersectX);
        		return new CopyOfSegment[]{theRightSegment, theLeftSegment};
        		
        	} else {
	            //3 seperate segments
	            CopyOfSegment theSegment3 = theLeftSegment.cloneSegment();
	            theLeftSegment.setXEnd(theRightSegment.getXStart());
	            theRightSegment.setXEnd(theIntersectX);
	            theSegment3.setXStart(theIntersectX);
	            return new CopyOfSegment[]{theLeftSegment, theRightSegment, theSegment3};
        	}
          }
        } else {
          if(theRightSegment.getXEnd() >= theLeftSegment.getXEnd()){
            //2 seperate segments
            theLeftSegment.setXEnd(theIntersectX);
            theRightSegment.setXStart(theIntersectX);
            return new CopyOfSegment[]{theLeftSegment, theRightSegment};
          } else {
            //3 seperate segments
            CopyOfSegment theSegment3 = theLeftSegment.cloneSegment();
            theLeftSegment.setXEnd(theIntersectX);
            theRightSegment.setXStart(theIntersectX);
            theSegment3.setXStart(theRightSegment.getXEnd());
            return new CopyOfSegment[]{theLeftSegment, theRightSegment, theSegment3};
          }
        }
      }
      
  }
  
  public double intersectX(CopyOfSegment aSegment){
    double x = (getZStart() - getZRico() * getXStart() - aSegment.getZStart() + aSegment.getZRico() * aSegment.getXStart()) / (aSegment.getZRico() - getZRico());
    if(x < getXStart()) return -1;
    if(x > getXEnd()) return -1;
    if(x < aSegment.getXStart()) return -1;
    if(x > aSegment.getXEnd()) return -1;
    return x;
  }
  
  public CopyOfSegment cloneSegment(){
    return new CopyOfSegment(xStart, xEnd, zStart, zEnd, lStart, lEnd, color, null);
  }
  
  public String toString(){
    return "<Segment p0=(" + xStart + "," + zStart + ") p1=(" + xEnd + "," + zEnd + ")>";
  }
  
  public static void main(String args[]){
//	  Segment theSegment1 = new Segment(26,30,8,4,0,0,Color.black.getRGB());
//	  Segment theSegment2 = new Segment(25,38,6,6,0,0,Color.black.getRGB());
//	  Segment theSegment1 = new Segment(18,24,8,4,0,0,Color.black.getRGB());
//	  Segment theSegment2 = new Segment(18,20,5,5,0,0,Color.black.getRGB());
//	  Segment theSegment1 = new Segment(2,6,4,4,0,0,Color.black.getRGB());
//	  Segment theSegment2 = new Segment(2,4,2,2,0,0,Color.black.getRGB());
//	  Segment theSegment1 = new Segment(2,6,4,4,0,0,Color.black.getRGB());
//	  Segment theSegment2 = new Segment(4,6,2,2,0,0,Color.black.getRGB());
//	  Segment theSegment1 = new Segment(2,4,4,4,0,0,Color.black.getRGB());
//	  Segment theSegment2 = new Segment(2,6,2,2,0,0,Color.black.getRGB());
//	  Segment theSegment1 = new Segment(4,6,4,4,0,0,Color.black.getRGB());
//	  Segment theSegment2 = new Segment(2,6,2,2,0,0,Color.black.getRGB());
//	  Segment theSegment1 = new Segment(2,6,4,4,0,0,Color.black.getRGB());
//	  Segment theSegment2 = new Segment(2,6,2,2,0,0,Color.black.getRGB());
//	  Segment theSegment1 = new Segment(2,6,4,2,0,0,Color.black.getRGB());
//	  Segment theSegment2 = new Segment(2,5,2,4,0,0,Color.black.getRGB());
//	  Segment theSegment1 = new Segment(2,6,4,2,0,0,Color.black.getRGB());
//	  Segment theSegment2 = new Segment(3,6,2,4,0,0,Color.black.getRGB());
//	  Segment theSegment1 = new Segment(2,6,4,2,0,0,Color.black.getRGB());
//	  Segment theSegment2 = new Segment(2,4,2,3,0,0,Color.black.getRGB());
//	  Segment theSegment1 = new Segment(2,6,4,2,0,0,Color.black.getRGB());
//	  Segment theSegment2 = new Segment(4,6,3,4,0,0,Color.black.getRGB());
//	  Segment theSegment1 = new Segment(2,6,4,2,0,0,Color.black.getRGB());
//	  Segment theSegment2 = new Segment(2,6,2,4,0,0,Color.black.getRGB());
//	  Segment theSegment1 = new Segment(2,6,2,4,0,0,Color.black.getRGB());
//	  Segment theSegment2 = new Segment(2,5,4,2,0,0,Color.black.getRGB());
//	  Segment theSegment1 = new Segment(2,6,2,4,0,0,Color.black.getRGB());
//	  Segment theSegment2 = new Segment(3,6,4,2,0,0,Color.black.getRGB());
//	  Segment theSegment1 = new Segment(2,6,2,4,0,0,Color.black.getRGB());
//	  Segment theSegment2 = new Segment(2,4,4,3,0,0,Color.black.getRGB());
//	  Segment theSegment1 = new Segment(2,6,2,4,0,0,Color.black.getRGB());
//	  Segment theSegment2 = new Segment(4,6,3,2,0,0,Color.black.getRGB());
	  CopyOfSegment theSegment1 = new CopyOfSegment(325.9700513412126,333.3445947198124,2441.126174469844,2485.003620332541,0,0,Color.black.getRGB(), null);
	  CopyOfSegment theSegment2 = new CopyOfSegment(333.3445947198124,334.92723657183296,2485.003620332543,2553.52800740042,0,0,Color.black.getRGB(), null);
	  
	  
	  CopyOfSegment[] theSegments  = theSegment1.intersect(theSegment2);
//	  Segment[] theSegments  = theSegment2.intersect(theSegment1);
	  for(int i=0;i<theSegments.length;i++){
	    System.out.println("Segment " + i + ": " + theSegments[i].toString());
	  }
	  
//	  Segment theSegment1 = new Segment(0,10,10,0, 0, 10, Color.black.getRGB());
//    Segment theSegment1 = new Segment(0,10,10,0, 0, 10, Color.black.getRGB());
//    Segment theSegment2 = new Segment(2,12,0,10, 0, 10, Color.black.getRGB());
//    Segment[] theSegments  = null;
//    long time1 = System.currentTimeMillis();
//    int times = 1000000;
//    for(int i=0;i<times;i++){
//     theSegments = theSegment1.intersect(theSegment2);
//    }
//    long time2 = System.currentTimeMillis();
//    System.out.println("time per intersect: " + ((double)time2 - (double)time1) / (double)times);
//    for(int i=0;i<theSegments.length;i++){
//      System.out.println("Segment " + i + ": " + theSegments[i].toString());
//    }
  }
}
